#!/usr/bin/env python3

import re
import tempfile
import shutil
import os
import argparse
from subprocess import call

parser = argparse.ArgumentParser(prog="markdown-check-ocaml")
parser.add_argument('--link', '-l', type=str, nargs='*', default=[], help="OCaml libraries to link")
parser.add_argument('files', type=str, nargs='+', help="Files to check")
parser.add_argument('--save', '-s', dest='save', action='store_true', default=False, help='Save OCaml code for debugging')
parser.add_argument('--vim', '-v', dest='vim', action='store_true', default=False, help='Open generated file in vim')
parser.add_argument('--run', '-r', dest='run', action='store_true', default=False, help='Run the compiled program')
args = parser.parse_args()

code = []
for file in args.files:
    with open(file, 'r') as f:
        code.append("(** FILE: {} *)\n".format(file))
        s = f.read()
        search = re.findall('```ocaml(.*?)```', s, flags=re.DOTALL)
        code += search

dir = tempfile.mkdtemp(prefix="markdown-check-ocaml-")
file = os.path.join(dir, "markdown_check.ml")

print("DIRECTORY:", dir)

with open(file, 'w') as f:
    f.write('\n'.join(code))

try:
    link = ' -pkg '.join(args.link)
    if len(args.link) > 0:
        link = "-pkg " + link

    out = os.popen("cd {} && ocamlbuild {} markdown_check.native".format(dir, link)).read()
    with open(os.path.join(dir, 'output'), 'w') as f:
        f.write(out)
except Exception as exc:
    print("ERROR:", exc)

if args.vim:
    call(["vim", "-p", os.path.join(dir, 'output'), file])

if args.run:
    call([os.path.join(dir, 'markdown_check.native')])

if not args.save:
    shutil.rmtree(dir)
